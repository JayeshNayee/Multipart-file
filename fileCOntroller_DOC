package com.fileDoc.controllers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fileDoc.dto.fileDocDto;
import com.fileDoc.fileDocEntity.userEntity;
import com.fileDoc.interFaces.fileDocInterFace;

@RestController
//@RequestMapping("/document")
@CrossOrigin("*")
public class fileController {
	@Autowired
	private fileDocInterFace fileDInter;	
	

	@PostMapping(value = "/saveFileData")
	public ResponseEntity<?> saveFile(@RequestBody fileDocDto fileDocDto){
		return new ResponseEntity<>(fileDInter.saveFile(fileDocDto), HttpStatus.ACCEPTED);
		
	}
	/*Single file*/
	@GetMapping(value = "/getSingleBy/{id}")
	public ResponseEntity<fileDocDto> getSingleBy(@PathVariable("id")Long id) {
		return new ResponseEntity<fileDocDto>(fileDInter.getSingleBy(id), HttpStatus.OK);
	}
	/*Single file*/
	@PostMapping(value = "/uploadFile", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<String>uploadFile(@RequestParam("file")MultipartFile multipartFile){
		return new ResponseEntity<String>(fileDInter.uploadFile(multipartFile), HttpStatus.OK);
	}
	
//	UploadContext fileContext with form Data
	
	@PostMapping(value = "/uploadFileWithData", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<String>uploadFileWithData
	(
			@RequestParam(value = "userData")String userData,
			@RequestParam(value="file")MultipartFile multipartFile) throws JsonMappingException, JsonProcessingException
	{
		ObjectMapper objectMapper = new ObjectMapper();
		userEntity userEntity = objectMapper.readValue(userData,userEntity.class);
		
		return new ResponseEntity<String>(fileDInter.uploadFileWithData(multipartFile, userEntity), HttpStatus.OK);
	}
	
	@DeleteMapping(value = "/deleteAll")
	public ResponseEntity<String>deleteAll(){
		return new ResponseEntity<String>(fileDInter.deleteAll(), HttpStatus.OK);
	}
	/*Upload Multiple File */
	@PostMapping(value = "/uploadMultipleFile")
	public ResponseEntity<String>uploadMultipleFile(@RequestParam("file") MultipartFile[] uploadMultipleFile){
		return new ResponseEntity<String>(fileDInter.uploadMultipleFile(uploadMultipleFile), HttpStatus.ACCEPTED);
	}
	/*Upload Multiple File Using Zip */
	@PostMapping(value = "/uplloadMultipleFileUsingZip")
	public ResponseEntity<String>uplloadMultipleFileUsingZip(@RequestParam("file") MultipartFile[] uploadMultipleFile){
		return new ResponseEntity<String>(fileDInter.uplloadMultipleFileUsingZip(uploadMultipleFile), HttpStatus.ACCEPTED);
	}
	
	@GetMapping(value = "/getMultiFileUsingZip")
	
	public ResponseEntity<Resource> getMultiFileUsingZip() 
	{
		Resource resource = fileDInter.getMultiFileUsingZip();
		
		System.out.println( resource);
		if(resource.exists()) 
		{
			HttpHeaders h1 = new HttpHeaders();
			h1.add(HttpHeaders.CONTENT_DISPOSITION, "attchment;filename=AllData.zip");
			return ResponseEntity.ok()
					 .headers(h1)
					 .contentType(MediaType.APPLICATION_OCTET_STREAM)
					 .body(resource);
		 }else {
			return ResponseEntity.notFound().build();
		}
			
		}

}

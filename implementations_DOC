
package com.fileDoc.implementations;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.fileDoc.dto.fileDocDto;
import com.fileDoc.fileDocEntity.fileDocEntity;
import com.fileDoc.fileDocEntity.multipleFileEntity;
import com.fileDoc.fileDocEntity.userEntity;
import com.fileDoc.helperPackage.helperClass;
import com.fileDoc.interFaces.fileDocInterFace;
import com.fileDoc.repositry.repoInterFace;
import com.fileDoc.repositry.userRepo;

@Component
public class implementation implements fileDocInterFace {

	@Autowired
	private repoInterFace repoInter;
	
	@Autowired
	private userRepo userRepo;
	
	@Autowired
	private helperClass helper;

	@Override
	public fileDocEntity saveFile(fileDocDto fileDocDto) {
		fileDocEntity fileEntity = helper.dtoTOentityConvertByMapper(fileDocDto);
		System.out.println(fileEntity);
			repoInter.save(fileEntity);
		return null;
	}

	/*************************************************** Get Single File ******************************************/
	@Override
	public fileDocDto getSingleBy(Long id) {

		Optional<fileDocEntity> idData = Optional.empty();
		// Optional<fileDocEntity> idData = repoInter.findByOriginalName("t.png");
		String newName = "";
		if (idData.isPresent()) {

			fileDocEntity fileDocEntity = idData.get();

			try {
				newName = new ClassPathResource("/static/filedata").getFile().getAbsolutePath();

				fileDocEntity.setName(newName + File.separator + fileDocEntity.getName());

				fileDocDto myDto = helper.entityToDtoconvertByMapper(fileDocEntity);
				System.out.println("get>>>>>>>>>>> " + id + " " + myDto);
				return myDto;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;

	}

	/*************************************************** upload Single File  ******************************************/
	@Override
	public String uploadFile(MultipartFile multipartFile) {


		// String path =
		// "C:\\Users\\JayeshNayee\\Documents\\workspace-spring-tool-suite-4-4.21.0.RELEASE\\fileDoc\\src\\main\\resources\\static\\filedata";

		try {
			String path = null;
			path = new ClassPathResource("/static/filedata").getFile().getAbsolutePath();

			String fileName = multipartFile.getOriginalFilename();
			String uniqueName = UUID.randomUUID().toString();

			String finalNAme = uniqueName.concat(fileName.substring(fileName.lastIndexOf('.')));

			fileDocEntity child = fileDocEntity.child(null, uniqueName, finalNAme, multipartFile.getContentType(), multipartFile.getSize());
			
			repoInter.save(child);
		//	System.out.println(multipartFile.getSize() / (1024 * 1024));
		/// repoInter.save(fileEntity);
			
			

			File f = new File(path);

			if (!f.exists()) {
				f.mkdir();
			}

			String fullPath = path + File.separator + finalNAme;

			System.out.println("full path is >>>>>>>" + fullPath);

			Files.copy(multipartFile.getInputStream(), Path.of(fullPath), StandardCopyOption.REPLACE_EXISTING);
			
	
		} catch (Exception e) {
			return "Error";
		}
		return "saved";
	}

	@Override
	public String deleteAll() {
		repoInter.deleteAll();
		return "All Data will be deleted";
	}

	/**************************************************** uploadMultipleFile  ******************************************/
	
	@Override
	public String uploadMultipleFile(MultipartFile[] uploadMultipleFile) {

		try {
			// child table
			List<fileDocEntity> list = new ArrayList<>();
			
			for (MultipartFile multipartFile : uploadMultipleFile)
			{

				String fileName = multipartFile.getOriginalFilename();
				String uniqueName = UUID.randomUUID().toString();
				
				String finalNAme = uniqueName.concat(fileName.substring(fileName.lastIndexOf('.')));
				
				
				
//				fileDocEntity entity = fileDocEntity.child(null, finalNAme,
//						multipartFile.getOriginalFilename(), multipartFile.getContentType(), multipartFile.getSize());
//				System.out.println("Name  "+ multipartFile.getName());
//				System.out.println("Original Name" + multipartFile.getOriginalFilename());
//				System.out.println("type "+  multipartFile.getContentType());
//				
//			
//				list.add(entity);
				
				System.out.println("List +++++++++++++++++++++"+ list);
		
				String path = null;
				path = new ClassPathResource("/static/filedata").getFile().getAbsolutePath();

				

				File f = new File(path);

				if (!f.exists()) {
					f.mkdir();
				}

				String fullPath = path + File.separator + finalNAme;

	
				Files.copy(multipartFile.getInputStream(), Path.of(fullPath), StandardCopyOption.REPLACE_EXISTING);
			}
			// add in parent table
			
			multipleFileEntity multipleFileEntity1 = new multipleFileEntity(null, "Image", list);
			//repoInter.save(multipleFileEntity1);
			System.out.println(">>>>>>>>"+ multipleFileEntity1);
			
		} catch (Exception e) {

		}
		return null;

	}
	/**************************************************** uploadMultipleFile using ZIP ******************************************/
	@Override
	public String uplloadMultipleFileUsingZip(MultipartFile[] uMultipartFiles) {
		

		try {
			String path  = new ClassPathResource("").getFile().getAbsolutePath();
			
			File folder = new File(path, "documents");
		

			if(!folder.exists())
			{
				folder.mkdir();
			}
			// create zip file
			String zipFileName = "Data.zip";
			String zipFilePath = folder.getAbsolutePath()+File.separator + zipFileName;
//			try(ZipOutputStream zOutputStream = new ZipOutputStream(new FileOutputStream(zipFilePath)))
//			{
//				for (MultipartFile multipartFile : uMultipartFiles) {
//					fileDocEntity fileDocEntity = new fileDocEntity(,multipartFile.getName(),
//							multipartFile.getOriginalFilename(), multipartFile.getContentType(), multipartFile.getSize());
//					  
//				repoInter.save(fileDocEntity);
//					  
//					  ZipEntry zipEntry  = new ZipEntry(multipartFile.getOriginalFilename());
//					  zOutputStream.putNextEntry(zipEntry);
//					  zOutputStream.write(multipartFile.getBytes());
//					  zOutputStream.closeEntry();
//				}
//			}
		return "Done saved "+  zipFilePath;
		} catch (Exception e) {
			e.printStackTrace();
			return "Failed";
		}
	
	}

	@Override
	public Resource getMultiFileUsingZip() {
		System.out.println("Zip Resource..");
		Resource  resource  = new ClassPathResource("AllData.zip");
		
		return resource;
	}
//**********************************	uploadFileWithData
	@Override
	public String uploadFileWithData(MultipartFile multipartFile, userEntity userData) {
		try {
			String path = null;
			path = new ClassPathResource("/static/filedata").getFile().getAbsolutePath();

			String fileName = multipartFile.getOriginalFilename();
			
			String uniqueName = UUID.randomUUID().toString();

			String finalNAme = uniqueName.concat(fileName.substring(fileName.lastIndexOf('.')));

			fileDocEntity child = fileDocEntity.child(null, uniqueName, finalNAme, multipartFile.getContentType(), multipartFile.getSize());
			
			//repoInter.save(child);
			//	System.out.println(multipartFile.getSize() / (1024 * 1024));
			/// repoInter.save(fileEntity);
			
			// set the file name and save it
			
			userData.setFileName(fileName);
			userRepo.save(userData);

			File f = new File(path);

			if (!f.exists()) {
				f.mkdir();
			}

			String fullPath = path + File.separator + finalNAme;

			System.out.println("full path is >>>>>>>" + fullPath);

			Files.copy(multipartFile.getInputStream(), Path.of(fullPath), StandardCopyOption.REPLACE_EXISTING);
			
	
		} catch (Exception e) {
			e.getMessage();
		}
		return "saved";
	}


	




}
